{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsWithId","map","good","index","name","id","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","isReversed","setReverse","visibleGoods","goods","sortBy","preparedGoods","sort","good1","good2","name1","name2","localeCompare","length","reverse","getPreparedGoods","className","type","onClick","cn","GoodList","GoodCard","ReactDOM","render","document","getElementById"],"mappings":"iPAkBMA,EAbyB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGkCC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CACxDC,KAAMF,EACNG,GAAIF,EAAQ,MAGRG,EAAsB,iBACtBC,EAAoB,WA2BnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAiCF,oBAAS,GAA1C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA5BR,SAA0BC,EAAOC,EAAQJ,GACvC,IAAMK,EAAa,YAAOF,GAqB1B,OAnBAE,EAAcC,MAAK,SAACC,EAAOC,GACzB,IAAMC,EAAQF,EAAMf,KACdkB,EAAQF,EAAMhB,KAEpB,OAAQY,GACN,KAAKV,EACH,OAAOe,EAAME,cAAcD,GAC7B,KAAKf,EACH,OAAOc,EAAMG,OAASF,EAExB,QACE,OAAO,MAITV,GACFK,EAAcQ,UAGTR,EAMcS,CAAiB1B,EAAaU,EAAWE,GAO9D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMlB,EAAaL,IAC5BqB,UAAWG,IACR,iBACA,CAAE,WAAYpB,IAAcJ,IALjC,iCAWA,wBACEsB,KAAK,SACLC,QAAS,kBAAMlB,EAAaJ,IAC5BoB,UAAWG,IACR,oBACA,CAAE,WAAYpB,IAAcH,IALjC,4BAWA,wBACEqB,KAAK,SACLC,QAAS,kBAAoBhB,GAAbD,IAChBe,UAAWG,IACR,oBACD,CAAE,YAAalB,IALnB,qBAWe,KAAdF,GACC,wBACEkB,KAAK,SACLC,QA5CV,WACElB,EAAa,IACbE,GAAW,IA2CHc,UAAU,4BAHZ,sBAUJ,cAAC,EAAD,CAAUZ,MAAOD,QAKViB,EAAW,SAAC,GAAD,IAAGhB,EAAH,EAAGA,MAAH,OACtB,oBAAIY,UAAU,WAAd,SACGZ,EAAMd,KAAI,SAAAC,GAAI,OACb,cAAC,EAAD,CAEEE,KAAMF,EAAKE,MADNF,EAAKG,UAOL2B,EAAW,SAAC,GAAD,IAAG5B,EAAH,EAAGA,KAAH,OAAc,oBAAI,UAAQ,OAAZ,SAAoBA,KCzH1D6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.075284ab.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst goodsWithId = goodsFromServer.map((good, index) => ({\n  name: good,\n  id: index + 1,\n}));\n\nconst SORT_FIELD_ALPHABET = 'alphabetically';\nconst SORT_FIELD_LENGTH = 'byLength';\n\nfunction getPreparedGoods(goods, sortBy, isReversed) {\n  const preparedGoods = [...goods];\n\n  preparedGoods.sort((good1, good2) => {\n    const name1 = good1.name;\n    const name2 = good2.name;\n\n    switch (sortBy) {\n      case SORT_FIELD_ALPHABET:\n        return name1.localeCompare(name2);\n      case SORT_FIELD_LENGTH:\n        return name1.length - name2;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setReverse] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsWithId, sortField, isReversed);\n\n  function resetGoods() {\n    setSortField('');\n    setReverse(false);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n          className={cn(\n            ('button is-info'),\n            ({ 'is-light': sortField !== SORT_FIELD_ALPHABET }),\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          className={cn(\n            ('button is-success'),\n            ({ 'is-light': sortField !== SORT_FIELD_LENGTH }),\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => (isReversed ? setReverse(false) : setReverse(true))}\n          className={cn(\n            ('button is-warning'),\n            { 'is-light': !isReversed },\n          )}\n        >\n          Reverse\n        </button>\n\n        {sortField !== '' && (\n          <button\n            type=\"button\"\n            onClick={resetGoods}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodList goods={visibleGoods} />\n    </div>\n  );\n};\n\nexport const GoodList = ({ goods }) => (\n  <ul className=\"GoodList\">\n    {goods.map(good => (\n      <GoodCard\n        key={good.id}\n        name={good.name}\n      />\n    ))}\n  </ul>\n);\n\nexport const GoodCard = ({ name }) => <li data-cy=\"Good\">{name}</li>;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}